{% extends "LibuBundle::libu/base.html.twig" %}
{# libu/Resources/views/libu/venta.html.twig #}

{% form_theme form 'bootstrap_3_layout.html.twig' %}

{% block stylesheets %}
	<script type="text/javascript">
	/**
	 * Retrieve binary data via XMLHttpRequest and print it.
	 */
	function directPrintFile(socket) {
	  // Get binary data
  	  path = "{{ url_tickets }}";
	  var req = new XMLHttpRequest();
	  req.open("GET", path, true);
	  req.responseType = "arraybuffer";
	  console.log("directPrintFile(): Making request for binary file");
	  req.onload = function (oEvent) {
	    console.log("directPrintFile(): Response received");
	    var arrayBuffer = req.response; // Note: not req.responseText
	    if (arrayBuffer) {
	      var result = directPrint(socket, arrayBuffer);
	      if(!result) {
	        alert('Failed, check the console for more info.');
	      }
	    }
	  };
	  req.send(null);
	}

	/**
	 * Extract binary data from a byte array print it.
	 */
	function directPrintBytes(socket, bytes) {
	  var result = directPrint(socket, new Uint8Array(bytes).buffer);
	  if(!result) {
	    alert('Failed, check the console for more info.');
	  }
	}

	/**
	 * Send ArrayBuffer of binary data.
	 */
	function directPrint(socket, printData) {
	  // Type check
	  if (!(printData instanceof ArrayBuffer)) {
	    console.log("directPrint(): Argument type must be ArrayBuffer.")
	    return false;
	  }
	  if(printSocket.readyState !== printSocket.OPEN) {
	    console.log("directPrint(): Socket is not open!");
	    return false;
	  }
	  // Serialise, send.
	  console.log("Sending " + printData.byteLength + " bytes of print data.");
	  printSocket.send(printData);
	  return true;
	}

	/**
	 * Connect to print server on startup.
	 */
	var printSocket = new WebSocket("ws://localhost:5555", ["binary"]);
	printSocket.binaryType = 'arraybuffer';
	printSocket.onopen = function (event) {
	  console.log("Socket is connected.");
	}
	printSocket.onerror = function(event) {
	  console.log('Socket error', event);
	};
	printSocket.onclose = function(event) {
	  console.log('Socket is closed');
	}
	</script>
{% endblock %}



{% block body %}
	<div class='container'>
		<div class="lead">
			{{ textopagos | raw}}
		</div>
	    <div class = 'col-sm-4 form-inline'>

			{{ form_start(form) }}
			) }}
	            {{ form_errors(form.tarjeta) }}
	            {{ form_widget(form.tarjeta) }}
			<br>
				{{ form_label(form.finalizado) }}
	            {{ form_widget(form.finalizado) }}
			<br>
				{{ form_label(form.factura) }}
	            {{ form_widget(form.factura) }}
			<br>
				{{ form_label(form.menu) }}
	            {{ form_widget(form.menu) }}

			{{ form_row(form._token) }}
		    {{ form_end(form)}}  

	    </div>
	</div>
{% endblock %}
